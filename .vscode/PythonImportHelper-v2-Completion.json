[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "load_card_templates",
        "importPath": "config.configHelpers",
        "description": "config.configHelpers",
        "isExtraImport": true,
        "detail": "config.configHelpers",
        "documentation": {}
    },
    {
        "label": "take_table_screenshot",
        "importPath": "config.configHelpers",
        "description": "config.configHelpers",
        "isExtraImport": true,
        "detail": "config.configHelpers",
        "documentation": {}
    },
    {
        "label": "image_to_mat",
        "importPath": "visionStuff.allPlayers.otherHelpers",
        "description": "visionStuff.allPlayers.otherHelpers",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.otherHelpers",
        "documentation": {}
    },
    {
        "label": "image_to_mat",
        "importPath": "visionStuff.allPlayers.otherHelpers",
        "description": "visionStuff.allPlayers.otherHelpers",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.otherHelpers",
        "documentation": {}
    },
    {
        "label": "ALL_CARD_TEMPLATES",
        "importPath": "config.constants",
        "description": "config.constants",
        "isExtraImport": true,
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "DEALER_TEMPLATE",
        "importPath": "config.constants",
        "description": "config.constants",
        "isExtraImport": true,
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "TABLE_SCREENSHOT_PATH",
        "importPath": "config.constants",
        "description": "config.constants",
        "isExtraImport": true,
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "ALL_CARD_TEMPLATES",
        "importPath": "config.constants",
        "description": "config.constants",
        "isExtraImport": true,
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "BET_DOLLAR_SIGN_TEMPLATE",
        "importPath": "config.constants",
        "description": "config.constants",
        "isExtraImport": true,
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "DEALER_TEMPLATE",
        "importPath": "config.constants",
        "description": "config.constants",
        "isExtraImport": true,
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "string_text_cleaner",
        "importPath": "utils.stringUtils",
        "description": "utils.stringUtils",
        "isExtraImport": true,
        "detail": "utils.stringUtils",
        "documentation": {}
    },
    {
        "label": "pyperclip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyperclip",
        "description": "pyperclip",
        "detail": "pyperclip",
        "documentation": {}
    },
    {
        "label": "recognize_bets_sixP",
        "importPath": "visionStuff.sixPlayers.elementsRecognition",
        "description": "visionStuff.sixPlayers.elementsRecognition",
        "isExtraImport": true,
        "detail": "visionStuff.sixPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "recognize_dealer_position_sixP",
        "importPath": "visionStuff.sixPlayers.elementsRecognition",
        "description": "visionStuff.sixPlayers.elementsRecognition",
        "isExtraImport": true,
        "detail": "visionStuff.sixPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "get_my_chips_roi",
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_my_game_roi",
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_my_hand_roi",
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_pot_amount_roi",
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_table_cards_roi",
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_bet_zone_roi",
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "recognize_cards",
        "importPath": "visionStuff.allPlayers.elementsRecognition",
        "description": "visionStuff.allPlayers.elementsRecognition",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "recognize_text",
        "importPath": "visionStuff.allPlayers.elementsRecognition",
        "description": "visionStuff.allPlayers.elementsRecognition",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "recognize_text",
        "importPath": "visionStuff.allPlayers.elementsRecognition",
        "description": "visionStuff.allPlayers.elementsRecognition",
        "isExtraImport": true,
        "detail": "visionStuff.allPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "six_players_normal_table_extractor",
        "importPath": "scripts.six_players_normal_table_extractor",
        "description": "scripts.six_players_normal_table_extractor",
        "isExtraImport": true,
        "detail": "scripts.six_players_normal_table_extractor",
        "documentation": {}
    },
    {
        "label": "repeat_script",
        "importPath": "utils.scriptUtils",
        "description": "utils.scriptUtils",
        "isExtraImport": true,
        "detail": "utils.scriptUtils",
        "documentation": {}
    },
    {
        "label": "load_card_templates",
        "kind": 2,
        "importPath": "config.configHelpers",
        "description": "config.configHelpers",
        "peekOfCode": "def load_card_templates(path: str) -> list:\n    \"\"\"Carga las plantillas de cartas y sus identificadores.\"\"\"\n    templates = []\n    for template_name in os.listdir(path):\n        template_image = cv.imread(os.path.join(path, template_name), 0)  # 0 para cargar en escala de grises\n        template_id = os.path.splitext(template_name)[0]  # Eliminar la extensi√≥n .png\n        templates.append((template_image, template_id))\n    return templates\ndef take_table_screenshot(TABLE_SCREENSHOT_PATH):\n    screenshot = ImageGrab.grab(bbox=(0,0,970,692))",
        "detail": "config.configHelpers",
        "documentation": {}
    },
    {
        "label": "take_table_screenshot",
        "kind": 2,
        "importPath": "config.configHelpers",
        "description": "config.configHelpers",
        "peekOfCode": "def take_table_screenshot(TABLE_SCREENSHOT_PATH):\n    screenshot = ImageGrab.grab(bbox=(0,0,970,692))\n    screenshot.save(TABLE_SCREENSHOT_PATH)",
        "detail": "config.configHelpers",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_DIR",
        "kind": 5,
        "importPath": "config.constants",
        "description": "config.constants",
        "peekOfCode": "TEMPLATE_DIR = \"./images/handCards\"\nALL_CARD_TEMPLATES = load_card_templates(TEMPLATE_DIR)\nTABLE_SCREENSHOT_PATH = \"screenshot.png\"\nDEALER_TEMPLATE = image_to_mat('./images/others/dealer.png')\nBET_DOLLAR_SIGN_TEMPLATE = dealer_template =image_to_mat('./images/others/betDolarSign.png')\nALL_CONSTS = {\n    \"TEMPLATE_DIR\": TEMPLATE_DIR,\n    \"ALL_CARD_TEMPLATES\": ALL_CARD_TEMPLATES,\n    \"TABLE_SCREENSHOT_PATH\": TABLE_SCREENSHOT_PATH\n}",
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "ALL_CARD_TEMPLATES",
        "kind": 5,
        "importPath": "config.constants",
        "description": "config.constants",
        "peekOfCode": "ALL_CARD_TEMPLATES = load_card_templates(TEMPLATE_DIR)\nTABLE_SCREENSHOT_PATH = \"screenshot.png\"\nDEALER_TEMPLATE = image_to_mat('./images/others/dealer.png')\nBET_DOLLAR_SIGN_TEMPLATE = dealer_template =image_to_mat('./images/others/betDolarSign.png')\nALL_CONSTS = {\n    \"TEMPLATE_DIR\": TEMPLATE_DIR,\n    \"ALL_CARD_TEMPLATES\": ALL_CARD_TEMPLATES,\n    \"TABLE_SCREENSHOT_PATH\": TABLE_SCREENSHOT_PATH\n}",
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "TABLE_SCREENSHOT_PATH",
        "kind": 5,
        "importPath": "config.constants",
        "description": "config.constants",
        "peekOfCode": "TABLE_SCREENSHOT_PATH = \"screenshot.png\"\nDEALER_TEMPLATE = image_to_mat('./images/others/dealer.png')\nBET_DOLLAR_SIGN_TEMPLATE = dealer_template =image_to_mat('./images/others/betDolarSign.png')\nALL_CONSTS = {\n    \"TEMPLATE_DIR\": TEMPLATE_DIR,\n    \"ALL_CARD_TEMPLATES\": ALL_CARD_TEMPLATES,\n    \"TABLE_SCREENSHOT_PATH\": TABLE_SCREENSHOT_PATH\n}",
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "DEALER_TEMPLATE",
        "kind": 5,
        "importPath": "config.constants",
        "description": "config.constants",
        "peekOfCode": "DEALER_TEMPLATE = image_to_mat('./images/others/dealer.png')\nBET_DOLLAR_SIGN_TEMPLATE = dealer_template =image_to_mat('./images/others/betDolarSign.png')\nALL_CONSTS = {\n    \"TEMPLATE_DIR\": TEMPLATE_DIR,\n    \"ALL_CARD_TEMPLATES\": ALL_CARD_TEMPLATES,\n    \"TABLE_SCREENSHOT_PATH\": TABLE_SCREENSHOT_PATH\n}",
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "BET_DOLLAR_SIGN_TEMPLATE",
        "kind": 5,
        "importPath": "config.constants",
        "description": "config.constants",
        "peekOfCode": "BET_DOLLAR_SIGN_TEMPLATE = dealer_template =image_to_mat('./images/others/betDolarSign.png')\nALL_CONSTS = {\n    \"TEMPLATE_DIR\": TEMPLATE_DIR,\n    \"ALL_CARD_TEMPLATES\": ALL_CARD_TEMPLATES,\n    \"TABLE_SCREENSHOT_PATH\": TABLE_SCREENSHOT_PATH\n}",
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "ALL_CONSTS",
        "kind": 5,
        "importPath": "config.constants",
        "description": "config.constants",
        "peekOfCode": "ALL_CONSTS = {\n    \"TEMPLATE_DIR\": TEMPLATE_DIR,\n    \"ALL_CARD_TEMPLATES\": ALL_CARD_TEMPLATES,\n    \"TABLE_SCREENSHOT_PATH\": TABLE_SCREENSHOT_PATH\n}",
        "detail": "config.constants",
        "documentation": {}
    },
    {
        "label": "six_players_normal_table_extractor",
        "kind": 2,
        "importPath": "scripts.six_players_normal_table_extractor",
        "description": "scripts.six_players_normal_table_extractor",
        "peekOfCode": "def six_players_normal_table_extractor():\n    take_table_screenshot(TABLE_SCREENSHOT_PATH)\n    gray_image = image_to_mat(TABLE_SCREENSHOT_PATH)\n    bets = recognize_bets_sixP(gray_image)\n    my_hand_roi = get_my_hand_roi(gray_image)\n    my_hand = recognize_cards(my_hand_roi)\n    table_cards_roi = get_table_cards_roi(gray_image)\n    table_cards = recognize_cards(table_cards_roi)\n    pot_amount_roi = get_pot_amount_roi(gray_image)\n    pot_amount = recognize_text(pot_amount_roi)",
        "detail": "scripts.six_players_normal_table_extractor",
        "documentation": {}
    },
    {
        "label": "repeat_script",
        "kind": 2,
        "importPath": "utils.scriptUtils",
        "description": "utils.scriptUtils",
        "peekOfCode": "def repeat_script(callback, interval=0.5):\n    \"\"\"Recibe un script y un intervalo en ms, repetir√° dicho script de manera infinita dejando una pausa entre cada repetici√≥n \"\"\"\n    while True:\n        callback()\n        time.sleep(interval)",
        "detail": "utils.scriptUtils",
        "documentation": {}
    },
    {
        "label": "string_number_cleaner",
        "kind": 2,
        "importPath": "utils.stringUtils",
        "description": "utils.stringUtils",
        "peekOfCode": "def string_number_cleaner(texto):\n    # Usamos una expresi√≥n regular para encontrar todos los d√≠gitos y comas\n    # y luego usamos ''.join() para combinarlos en un solo string\n    resultado = ''.join(re.findall(r'[0-9,]', texto))\n    # Si no se encontraron caracteres num√©ricos ni comas, devolvemos None\n    if not resultado:\n        return None\n    return resultado\ndef string_text_cleaner(texto):\n    # Usamos una expresi√≥n regular para encontrar todos los d√≠gitos y comas",
        "detail": "utils.stringUtils",
        "documentation": {}
    },
    {
        "label": "string_text_cleaner",
        "kind": 2,
        "importPath": "utils.stringUtils",
        "description": "utils.stringUtils",
        "peekOfCode": "def string_text_cleaner(texto):\n    # Usamos una expresi√≥n regular para encontrar todos los d√≠gitos y comas\n    # y luego usamos ''.join() para combinarlos en un solo string\n    resultado = ''.join(re.findall(r'[0-9A-Za-z,]', texto))\n    # Si no se encontraron caracteres num√©ricos ni comas, devolvemos None\n    if not resultado:\n        return None\n    return resultado",
        "detail": "utils.stringUtils",
        "documentation": {}
    },
    {
        "label": "simple_roi_tester",
        "kind": 2,
        "importPath": "utils.testingUtils",
        "description": "utils.testingUtils",
        "peekOfCode": "def simple_roi_tester(roi: numpy.ndarray ):\n    \"\"\"Muestra la imagen capturada de la region de interes (roi) dada\"\"\"\n    cv.imshow('roi_tester', roi)\n    cv.waitKey(0)\n    cv.destroyAllWindows()\ndef roi_coordinates_tester(gray_image: numpy.ndarray, coordinates=(.10,.20,.30,.40)):\n    \"\"\"Dado una gray image, muestra en ventana el segmento roi denotado por las coordenadas en decimales (porciento) en el segundo par√°metro\"\"\"\n    height, width = gray_image.shape\n    subImage= gray_image[int(height *coordinates[0]):int(height *coordinates[1]), int(width * coordinates[2]):int(width *coordinates[3])]\n    simple_roi_tester(subImage)",
        "detail": "utils.testingUtils",
        "documentation": {}
    },
    {
        "label": "roi_coordinates_tester",
        "kind": 2,
        "importPath": "utils.testingUtils",
        "description": "utils.testingUtils",
        "peekOfCode": "def roi_coordinates_tester(gray_image: numpy.ndarray, coordinates=(.10,.20,.30,.40)):\n    \"\"\"Dado una gray image, muestra en ventana el segmento roi denotado por las coordenadas en decimales (porciento) en el segundo par√°metro\"\"\"\n    height, width = gray_image.shape\n    subImage= gray_image[int(height *coordinates[0]):int(height *coordinates[1]), int(width * coordinates[2]):int(width *coordinates[3])]\n    simple_roi_tester(subImage)",
        "detail": "utils.testingUtils",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "recognize_cards",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.elementsRecognition",
        "description": "visionStuff.allPlayers.elementsRecognition",
        "peekOfCode": "def recognize_cards(roi):\n    \"\"\"Dado una zona roi detecta todas las cartas que se encuentran en el roi\"\"\"\n    detected_cards = []\n    for template, template_id in ALL_CARD_TEMPLATES:\n        w, h = template.shape[::-1]\n        res = cv.matchTemplate(roi, template, cv.TM_CCOEFF_NORMED)\n        threshold = 0.95\n        loc = np.where(res >= threshold)\n        for pt in zip(*loc[::-1]):\n            # Evita la duplicaci√≥n y agrega el identificador de la carta",
        "detail": "visionStuff.allPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "recognize_text",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.elementsRecognition",
        "description": "visionStuff.allPlayers.elementsRecognition",
        "peekOfCode": "def recognize_text(roi):\n    \"\"\"Dado una zona roi se usa OCR para extraer el texto (acota el roi para que contenga unicamente texto)\"\"\"\n    # Convertir la matriz numpy a una imagen PIL para usar con pytesseract\n    roi_image = Image.fromarray(roi)\n    # Usar pytesseract para extraer texto\n    text = pytesseract.image_to_string(roi_image, config='--psm 6')\n    return text.strip().replace('Pot: ', '')",
        "detail": "visionStuff.allPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "image_to_mat",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.otherHelpers",
        "description": "visionStuff.allPlayers.otherHelpers",
        "peekOfCode": "def image_to_mat(image_path: str):\n    \"\"\"Procesa imagen y la convierte a matriz Mat\"\"\"\n    mat_image = cv.imread(image_path)\n    gray_image = cv.cvtColor(mat_image, cv.COLOR_BGR2GRAY)\n    return gray_image",
        "detail": "visionStuff.allPlayers.otherHelpers",
        "documentation": {}
    },
    {
        "label": "get_my_hand_roi",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "peekOfCode": "def get_my_hand_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s de mi mano.\"\"\"\n    height, width = gray_image.shape\n    return gray_image[int(height * 0.62):int(height * 0.72), int(width * 0.428):int(width * 0.56)]\ndef get_table_cards_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s de las cartas en la mesa.\"\"\"\n    height, width = gray_image.shape\n    return gray_image[int(height * 0.35):int(height * 0.48), int(width * 0.32):int(width * 0.67)]\ndef get_pot_amount_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s del monto del bote.\"\"\"",
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_table_cards_roi",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "peekOfCode": "def get_table_cards_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s de las cartas en la mesa.\"\"\"\n    height, width = gray_image.shape\n    return gray_image[int(height * 0.35):int(height * 0.48), int(width * 0.32):int(width * 0.67)]\ndef get_pot_amount_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s del monto del bote.\"\"\"\n    height, width = gray_image.shape\n    # Estas proporciones se basan en la observaci√≥n de la imagen proporcionada.\n    # Es posible que debas ajustar estas proporciones si cambia la resoluci√≥n o si la interfaz de usuario es diferente.\n    y_start = int(height * 0.30)",
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_pot_amount_roi",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "peekOfCode": "def get_pot_amount_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s del monto del bote.\"\"\"\n    height, width = gray_image.shape\n    # Estas proporciones se basan en la observaci√≥n de la imagen proporcionada.\n    # Es posible que debas ajustar estas proporciones si cambia la resoluci√≥n o si la interfaz de usuario es diferente.\n    y_start = int(height * 0.30)\n    y_end = int(height * 0.35)  \n    x_start = int(width * 0.42)  \n    x_end = int(width * 0.58)    \n    return gray_image[y_start:y_end, x_start:x_end]",
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_my_chips_roi",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "peekOfCode": "def get_my_chips_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s de mis fichas.\"\"\"\n    height, width = gray_image.shape\n    return gray_image[int(height * 0.735):int(height * 0.78), int(width * 0.47):int(width * 0.57)]\ndef get_my_game_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s de mi juego (par, color, o lo que tenga formado).\"\"\"\n    height, width = gray_image.shape\n    return gray_image[int(height * 0.728):int(height * 0.77), int(width * 0.75):int(width * 0.98)]\ndef get_bet_zone_roi(original_image):\n    \"\"\"Recibe una grey image roi con la zona donde apuesta un jugador, busca el signo de $ y retorna un roi con √∫nicamente la zona del dinero apostado\"\"\"",
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_my_game_roi",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "peekOfCode": "def get_my_game_roi(gray_image: np.ndarray):\n    \"\"\"Extraer zonas de inter√©s de mi juego (par, color, o lo que tenga formado).\"\"\"\n    height, width = gray_image.shape\n    return gray_image[int(height * 0.728):int(height * 0.77), int(width * 0.75):int(width * 0.98)]\ndef get_bet_zone_roi(original_image):\n    \"\"\"Recibe una grey image roi con la zona donde apuesta un jugador, busca el signo de $ y retorna un roi con √∫nicamente la zona del dinero apostado\"\"\"\n    # Usar template matching para encontrar el signo $\n    res = cv.matchTemplate(original_image, BET_DOLLAR_SIGN_TEMPLATE, cv.TM_CCOEFF_NORMED)\n    _, max_val, _, max_loc = cv.minMaxLoc(res)\n    # Introducir un umbral de coincidencia",
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "get_bet_zone_roi",
        "kind": 2,
        "importPath": "visionStuff.allPlayers.roiExtractors",
        "description": "visionStuff.allPlayers.roiExtractors",
        "peekOfCode": "def get_bet_zone_roi(original_image):\n    \"\"\"Recibe una grey image roi con la zona donde apuesta un jugador, busca el signo de $ y retorna un roi con √∫nicamente la zona del dinero apostado\"\"\"\n    # Usar template matching para encontrar el signo $\n    res = cv.matchTemplate(original_image, BET_DOLLAR_SIGN_TEMPLATE, cv.TM_CCOEFF_NORMED)\n    _, max_val, _, max_loc = cv.minMaxLoc(res)\n    # Introducir un umbral de coincidencia\n    THRESHOLD = 0.8\n    if max_val < THRESHOLD:\n        return None\n    top_left = max_loc",
        "detail": "visionStuff.allPlayers.roiExtractors",
        "documentation": {}
    },
    {
        "label": "recognize_bets_sixP",
        "kind": 2,
        "importPath": "visionStuff.sixPlayers.elementsRecognition",
        "description": "visionStuff.sixPlayers.elementsRecognition",
        "peekOfCode": "def recognize_bets_sixP(gray_image):\n    \"\"\"Six Player Table: A partir de la gray image de la mesa, detecta las zonas de apuesta de los villanos y retorna las apuestas (si es que hubo)\"\"\"\n    positions = {\n        'V1': (.49, .59, .23, .42),\n        'V2': (.315, .355, .25, .45),\n        'V3': (.22, .32, .47, .67),\n        'V4': (.28, .33, .55, .73),\n        'V-1': (.52, .57, .62, .81)\n    }\n    bets = {}",
        "detail": "visionStuff.sixPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "recognize_dealer_position_sixP",
        "kind": 2,
        "importPath": "visionStuff.sixPlayers.elementsRecognition",
        "description": "visionStuff.sixPlayers.elementsRecognition",
        "peekOfCode": "def recognize_dealer_position_sixP(gray_image):\n    \"\"\"Six Player Table: A partir de la gray image de la mesa, detecta la posici√≥n de la ficha del dealer\"\"\"\n    positions = {\n        'D': (.58, .68, .35, .45), # me\n        'D+1': (.40, .50, .15, .20), # one\n        'D+2': (.30, .40, .19, .27), # two-\n        'D+3': (.22, .32, .50, .60), # three\n        'D+4': (.30, .40, .72, .82), # four\n        'D-1': (.52, .62, .68, .78) # five\n    }",
        "detail": "visionStuff.sixPlayers.elementsRecognition",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "index",
        "description": "index",
        "peekOfCode": "def main():\n   repeat_script(six_players_normal_table_extractor, 0.350)\nif __name__ == \"__main__\":\n    main()",
        "detail": "index",
        "documentation": {}
    }
]